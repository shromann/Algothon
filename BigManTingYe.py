import pandas as pd
import numpy as np
from math import log, exp


nInst = 100

position = np.zeros(nInst, int)
long = {}
short = {}

mrWindow = 8
width = 1

open = np.array([{} for _ in range(nInst)])

def getMyPosition(price):
    global position

    position += delta(price)
    print(position[0])
    return position

def delta(price):
    # price: the price data given for this turn
    price = pd.DataFrame(price).T

    # currPrice: the current price, can buy or sell
    currPrice = price.iloc[-1]

    # posChange: the netChange we want to make to our current position 
    posChange = np.zeros(nInst, int)

    # days: days passed (incl today) thus far 
    days  = price.__len__()

    #=============================================== Statical Mean Reversion Strategy ===============================================#

    # don't trade prior to mrReversion window days
    if days < mrWindow + 1:
        return posChange
    
    LD = price.iloc[-mrWindow-1:].applymap(log).diff().dropna()
    LDHist = LD.iloc[:-1]

    MLD, SLD = LDHist.mean(), LDHist.std()
    LB, UB = MLD - (width * SLD), MLD + (width * SLD)
    lastPrice = price.iloc[-2]

    MLD = MLD.map(exp) * lastPrice
    LB = LB.map(exp)   * lastPrice
    UB = UB.map(exp)   * lastPrice

    # Run LDMR 
    posChange += MeanReversion(currPrice, MLD, LB, UB)
    

    # TODO: testing purposes (remove to run the whole thing)
    if days == 30:
        exit(1)


    return posChange



def MeanReversion(currPrice, MLD, LB, UB):
    """
    TODO:
    - need to close previous positions
    - manage all postions using a dictionary
    - open position 

    ideas:
        - make the conf interval tighter to find more intersections
    """

    global netPosition

    posChange = np.zeros(nInst, int)
    
    # ------ 
    # bigLong, bigShort = currPrice < LB, currPrice > UB
    # smallLong, smallShort = (LDReal < MLD) & (LDReal > LB), (LDReal > MLD) & (LDReal < UB)

    # ========= strategy exp ==========

    # posChange[bigLong] += 1
    # posChange[bigShort] -= 1

    # posChange[smallLong] += 1
    # posChange[smallShort] -= 1
    # ------
    long, short = currPrice < MLD, currPrice > MLD

    posChange[long] += 1
    posChange[short] -= 1
    

    print(LB[0], MLD[0], UB[0], 'true:', currPrice[0])

    if currPrice[0] < MLD[0]: 
        print('buy')
    elif currPrice[0] > MLD[0]:
        print('sell')
    else:
        print('hold')

    return posChange

# ================================================================================================================================

def insert_row(df, df_insert, limit):
    if df.__len__() > limit:
        df.iloc[0] = np.NaN
        df.dropna(inplace=True)
    df = df.append(pd.DataFrame(df_insert).T)
    return df.reset_index(drop=True)

def logDiff(stock):
    return stock.map(log).diff().dropna()

max_corr = {0: 47,
 1: 2,
 2: 95,
 3: 46,
 4: 4,
 5: 62,
 6: 92,
 7: 7,
 8: 95,
 9: 9,
 10: 2,
 11: 11,
 12: 91,
 13: 13,
 14: 2,
 15: 78,
 16: 16,
 17: 86,
 18: 52,
 19: 19,
 20: 20,
 21: 21,
 22: 51,
 23: 76,
 24: 24,
 25: 69,
 26: 2,
 27: 27,
 28: 52,
 29: 29,
 30: 30,
 31: 89,
 32: 49,
 33: 42,
 34: 87,
 35: 35,
 36: 57,
 37: 37,
 38: 38,
 39: 39,
 40: 80,
 41: 55,
 42: 33,
 43: 43,
 44: 74,
 45: 45,
 46: 15,
 47: 78,
 48: 48,
 49: 60,
 50: 50,
 51: 89,
 52: 74,
 53: 53,
 54: 32,
 55: 50,
 56: 56,
 57: 36,
 58: 58,
 59: 39,
 60: 49,
 61: 61,
 62: 65,
 63: 21,
 64: 64,
 65: 65,
 66: 66,
 67: 52,
 68: 68,
 69: 62,
 70: 70,
 71: 60,
 72: 72,
 73: 14,
 74: 74,
 75: 75,
 76: 60,
 77: 77,
 78: 78,
 79: 79,
 80: 80,
 81: 81,
 82: 82,
 83: 83,
 84: 51,
 85: 85,
 86: 21,
 87: 34,
 88: 88,
 89: 89,
 90: 96,
 91: 76,
 92: 6,
 93: 15,
 94: 0,
 95: 32,
 96: 96,
 97: 6,
 98: 98,
 99: 99}


prob = [-0.42105263157894735,
 0.5141700404858299,
 0.6072874493927125,
 0.5182186234817814,
 -0.4574898785425101,
 0.562753036437247,
 0.6518218623481782,
 -0.4939271255060729,
 0.5506072874493927,
 -0.48582995951417,
 0.6477732793522267,
 -0.340080971659919,
 0.5708502024291497,
 0.6639676113360324,
 0.5668016194331984,
 0.5263157894736842,
 -0.44129554655870445,
 0.5182186234817814,
 -0.4574898785425101,
 0.5546558704453441,
 -0.4291497975708502,
 0.6275303643724697,
 0.5546558704453441,
 -0.4777327935222672,
 -0.38461538461538464,
 -0.4817813765182186,
 -0.48582995951417,
 0.562753036437247,
 0.5425101214574899,
 -0.41700404858299595,
 0.5182186234817814,
 0.5384615384615384,
 0.7975708502024291,
 0.5263157894736842,
 0.6072874493927125,
 0.5465587044534413,
 0.9392712550607287,
 0.5870445344129555,
 -0.4898785425101215,
 0.5060728744939271,
 0.5263157894736842,
 -0.44534412955465585,
 -0.43724696356275305,
 -0.4979757085020243,
 0.9554655870445344,
 -0.4534412955465587,
 -0.4089068825910931,
 -0.4817813765182186,
 0.5546558704453441,
 0.8785425101214575,
 0.5546558704453441,
 0.5425101214574899,
 0.7611336032388664,
 0.582995951417004,
 0.5708502024291497,
 -0.46558704453441296,
 -0.4898785425101215,
 0.6437246963562753,
 -0.4817813765182186,
 0.5182186234817814,
 0.9635627530364372,
 0.562753036437247,
 -0.47368421052631576,
 0.5182186234817814,
 -0.4251012145748988,
 -0.41295546558704455,
 0.5222672064777328,
 0.582995951417004,
 0.5870445344129555,
 -0.4048582995951417,
 0.6153846153846154,
 -0.340080971659919,
 0.5546558704453441,
 0.5748987854251012,
 1.0,
 -0.4291497975708502,
 0.8502024291497976,
 0.5182186234817814,
 0.5506072874493927,
 0.5020242914979757,
 -0.4817813765182186,
 0.5222672064777328,
 -0.4898785425101215,
 0.5708502024291497,
 -0.46558704453441296,
 -0.4331983805668016,
 -0.46963562753036436,
 -0.3805668016194332,
 -0.46153846153846156,
 0.611336032388664,
 0.5141700404858299,
 0.6923076923076923,
 0.6882591093117408,
 -0.4574898785425101,
 -0.4777327935222672,
 0.8137651821862348,
 -0.4979757085020243,
 0.5546558704453441,
 -0.4493927125506073,
 0.6356275303643725]

conf = [0.5,
 0.55,
 0.4666666666666667,
 0.4166666666666667,
 0.6166666666666667,
 0.38333333333333336,
 0.5,
 0.5666666666666667,
 0.36666666666666664,
 0.48333333333333334,
 0.4666666666666667,
 0.6,
 0.45,
 0.4166666666666667,
 0.38333333333333336,
 0.5,
 0.5666666666666667,
 0.3333333333333333,
 0.5666666666666667,
 0.5333333333333333,
 0.43333333333333335,
 0.4666666666666667,
 0.5,
 0.55,
 0.45,
 0.38333333333333336,
 0.4666666666666667,
 0.38333333333333336,
 0.5,
 0.5166666666666667,
 0.5,
 0.48333333333333334,
 0.5833333333333334,
 0.5833333333333334,
 0.4666666666666667,
 0.5166666666666667,
 0.6166666666666667,
 0.5333333333333333,
 0.45,
 0.5666666666666667,
 0.5333333333333333,
 0.5,
 0.5833333333333334,
 0.5166666666666667,
 0.6,
 0.38333333333333336,
 0.4666666666666667,
 0.5,
 0.5666666666666667,
 0.6666666666666666,
 0.5833333333333334,
 0.6,
 0.43333333333333335,
 0.43333333333333335,
 0.5833333333333334,
 0.4166666666666667,
 0.5,
 0.55,
 0.45,
 0.5833333333333334,
 0.7,
 0.45,
 0.5333333333333333,
 0.38333333333333336,
 0.45,
 0.4666666666666667,
 0.48333333333333334,
 0.4166666666666667,
 0.48333333333333334,
 0.5166666666666667,
 0.5333333333333333,
 0.45,
 0.48333333333333334,
 0.5,
 0.5666666666666667,
 0.48333333333333334,
 0.6333333333333333,
 0.5333333333333333,
 0.4666666666666667,
 0.4166666666666667,
 0.6333333333333333,
 0.4166666666666667,
 0.35,
 0.4166666666666667,
 0.5833333333333334,
 0.4666666666666667,
 0.4166666666666667,
 0.5333333333333333,
 0.5,
 0.5666666666666667,
 0.5666666666666667,
 0.5166666666666667,
 0.55,
 0.4,
 0.55,
 0.5833333333333334,
 0.4166666666666667,
 0.5,
 0.5333333333333333,
 0.4166666666666667]